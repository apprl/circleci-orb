version: 2.1

executors:
  sentry-cli:
    docker:
      - image: getsentry/sentry-cli

orbs:
  aws-s3: circleci/aws-s3@1.0.0

description: |
  Syncs circleci machine ip with aws security group

examples:
  basic:
    description: "Examples uses of apprl circleci tools"
    usage:
      version: 2.1
      orbs:
        apprl-circleci-tools: apprl/apprl-circleci-tools@1.0.0
      jobs:
        build:
          docker:
            - image: circleci/python:2.7
          steps:
            - apprl-circleci-tools/sync-ips-to-aws-security-group:
                security_group: aws-security-group
            - apprl-circleci-tools/copy-kubeconfig
            - apprl-circleci-tools/setup-helm
            - apprl-circleci-tools/test-helm:
                kubeconfig: config.file

      workflows:
        test-build-deploy:
          jobs:
            - apprl-circleci-tools/download-kubeconfig:
                working_directory: ~/dir
                kubeconfig: s3://path/to/kubectl/config.yaml
            - apprl-circleci-tools/notify-sentry-app-released:
                tag: 1.2.3
                project: example
                auto-set-commits: true
            - apprl-circleci-tools/notify-sentry-app-deployed:
                tag: 1.2.3
                project: example
                environment: stage


commands:
  setup-helm:
    steps:
      - run:
          command: |
            helm init --client-only
            helm plugin install https://github.com/hypnoglow/helm-s3.git
            AWS_DEFAULT_REGION=eu-west-1 helm repo add apprlcharts s3://apprl-development/k8s/charts
            helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com
            helm repo list
  test-helm:
    parameters:
      kubeconfig:
        type: string
    steps:
      - run:
          name: Test helm
          command: |
            public_ip_address=$(wget -qO- http://checkip.amazonaws.com)
            echo "This computers public ip address is $public_ip_address region $AWS_DEFAULT_REGION"
            helm version --kube-context=<<parameters.kubeconfig>>
  copy-kubeconfig:
    steps:
      - run:
          name: Copy kubeconfig from workspace
          command: |
            mkdir /root/.kube
            cp workspace/kubeconfig/config.yaml ~/.kube/config;
  sync-ips-to-aws-security-group:
    description: "Syncs circleci machine ip with aws security group"
    parameters:
      region:
        type: string
      security_group:
        type: string
    steps:
      - run:
          name: Insall aws cli
          command: |
            apk --no-cache update && \
              apk --no-cache add python py-pip py-setuptools ca-certificates groff less && \
              pip --no-cache-dir install awscli==1.15.47 && \
              apk add git openssh make jq bash && \
              rm -rf /var/cache/apk/*
      - run:
          name: Remove ips form security group
          command: wget -O - https://raw.githubusercontent.com/apprl/circleci-orb/master/orb/apprl-circleci-tools/remove-ips-from-sg.sh | AWS_DEFAULT_REGION=<<parameters.region>> AWS_SECURITY_GROUP=<<parameters.security_group>> bash
      - run:
          name: Add ip to security group
          command: wget -O - https://raw.githubusercontent.com/apprl/circleci-orb/master/orb/apprl-circleci-tools/add-ip-to-sg.sh | AWS_DEFAULT_REGION=<<parameters.region>> AWS_SECURITY_GROUP=<<parameters.security_group>> bash


jobs:
  download-kubeconfig:
    parameters:
      kubeconfig:
        type: string
      working_directory:
        type: string
    working_directory: <<parameters.working_directory>>
    docker:
      - image: 'circleci/python:2.7'
    steps:
      - attach_workspace:
          at: workspace
      - run:
          name: "Setup aws retion environment variables"
          command: echo 'export AWS_REGION="$AWS_DEFAULT_REGION"' >> $BASH_ENV
      - aws-s3/copy:
          from: <<parameters.kubeconfig>>
          to: 'kubeconfig/config.yaml'
      - persist_to_workspace:
          root: .
          paths:
            - kubeconfig
  notify-sentry-app-released:
    executor: sentry-cli
    parameters:
      project:
        type: string
        description: Project name in Sentry
      tag:
        type: string
        description: Release ID (a.k.a version). This is commonly a git SHA or a custom version number.
      auto-set-commits:
        default: true
        type: boolean
        description: Use sentry-cli --auto flag to set associated commits automatically, else it will use commits from latest tag
    steps:
      - checkout
      - run:
          name: Create sentry release
          command: |
            sentry-cli releases new -p <<parameters.project>> <<parameters.project>>@<<parameters.tag>>
      - when:
          condition: <<parameters.auto-set-commits>>
          steps:
            - run:
                name: Auto set commits for sentry release
                command: |
                  sentry-cli releases set-commits <<parameters.project>>@<<parameters.tag>> --auto
      - unless:
          condition: <<parameters.auto-set-commits>>
          steps:
            - run:
                name: Get github previous tag
                command: |
                  echo 'export PREV_TAG=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`)' >> $BASH_ENV
            - run:
                name: Set commits for sentry release
                command: |
                  sentry-cli releases set-commits <<parameters.project>>@<<parameters.tag>> --commit "$CIRCLE_PROJECT_USERNAME/$CIRCLE_USERNAME@$PREV_TAG..<<parameters.tag>>"
      - run:
          name: Report release built to sentry
          command: |
            sentry-cli releases finalize <<parameters.tag>>

  notify-sentry-app-deployed:
    executor: sentry-cli
    parameters:
      project:
        type: string
        description: Project name in Sentry
      tag:
        type: string
        description: Release ID (a.k.a version). This is commonly a git SHA or a custom version number.
      environment:
        type: string
        description: The environment that the release is deployed to
    steps:
      - run:
          name: Report release deployed to sentry
          command: |
            sentry-cli releases deploys <<parameters.project>>@<<parameters.tag>> new -e <<parameters.environment>>
